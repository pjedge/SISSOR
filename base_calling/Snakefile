from collections import defaultdict
import pickle
import random

localrules: all, simlinks

samples = ['PGP1_21','PGP1_22','PGP1_A1']
chambers = list(range(1,25))
chambers_pad = ['{0:02d}'.format(c) for c in chambers]

chunksize = int(5e5)

SAMTOOLS = '/opt/biotools/samtools/1.3/bin/samtools'
HG19     = '/home/wkchu/zhang_lab_oasis/resources_v2.8_b37/human_g1k_v37_decoy.fasta' #'/oasis/tscc/scratch/pedge/data/genomes/hg19/hg19.fa'
PGP1_21_dir = '/oasis/tscc/scratch/wkchu/SISSOR/PGP1_21_highoutputmem/BAM'
PGP1_22_dir = '/oasis/tscc/scratch/wkchu/SISSOR/PGP1_22/previous/BAM'
PGP1_A1_dir = '/oasis/tscc/scratch/wkchu/SISSOR/PGP1_A1/HiSeqCombinedBAM'

hg19_sizes = '''1	249250621
2	243199373
3	198022430
4	191154276
5	180915260
6	171115067
7	159138663
X	155270560
8	146364022
9	141213431
10	135534747
11	135006516
12	133851895
13	115169878
14	107349540
15	102531392
16	90354753
17	81195210
18	78077248
20	63025520
Y	59373566
19	59128983
22	51304566
21	48129895'''
hg19_size_list = []
for line in hg19_sizes.split('\n'):
    c,l = line.split('\t')
    hg19_size_list.append((c,int(l)))

# create chunks of hg19
# return list of (chrom,start,stop) tuples. stop is inclusive
chunklist = []
for chrom, chrlen in hg19_size_list:
    for start in range(1,chrlen+1,chunksize):
        end = start+chunksize-1 if start+chunksize-1 < chrlen else chrlen
        chunklist.append((chrom,start,end))

chunklist = [(a,b,c) for a,b,c in chunklist if a == '20']
regions = ['{}.{}.{}'.format(chrom,start,stop) for chrom,start,stop in chunklist]

rule all:
    input:
        #expand('pileups/{s}/ch{c}.pileup',s=samples,c=chambers),
        #expand('pileups_subsample/{s}/ch{c}.pileup',s=samples,c=chambers),
        #'freebayes/haploid.all.vcf',
        expand('freebayes_region/haploid.{region}.vcf',region=regions)
        #expand('bams/{cell}/ch{ch}.bam',cell=['PGP1_22','PGP1_A1'],ch=chambers)

short_chrom_names = set([str(x) for x in range(1,23)]+['X','Y'])
chrom_names = set(['chr'+str(x) for x in range(1,23)]+['chrX','chrY'])

def format_chrom(chrom_str):
    if chrom_str in short_chrom_names:
        chrom_str = 'chr' + chrom_str
    #assert(chrom_str in chrom_names)
    if chrom_str not in chrom_names:
        print('WARNING: chrom_str "{}" not in chrom_names'.format(chrom_str))
    return chrom_str
'''
rule combine_freebayes:
    params: job_name = 'combine_freebayes'
    input:  expand('freebayes_region/haploid_{region}.vcf',region=regions)
    output: all_chamber_vcf = 'freebayes/haploid.all.vcf'
    shell:
'''
rule add_readgroup:
    params:
        job_name = 'add_rg.{cell}.{ch}',
    input: bam = 'bams/{cell}/ch{ch}.no_rg.bam'
    output: bam = 'bams/{cell}/ch{ch}.bam'
    run:
        SAMPLE = '{0}_{1:02}'.format(wildcards.cell,int(wildcards.ch))
        shell('''/home/pedge/git/bamaddrg/bamaddrg -b {input.bam} -s {SAMPLE} -r {SAMPLE} > {output.bam}''')

rule run_freebayes:
    params:
        job_name   = 'freebayes.{chr}.{start}.{stop}',
    input:  bams       = expand('bams/{s}/ch{c}.bam',s=samples,c=chambers),
            bais       = expand('bams/{s}/ch{c}.bam.bai',s=samples,c=chambers)
    output: region_vcf = 'freebayes_region/haploid.{chr}.{start}.{stop}.vcf'
    shell:
        '''
        freebayes -f {HG19} --min-alternate-count 2 \
        --pooled-discrete \
        --genotype-qualities \
        --min-mapping-quality 30\
        --min-base-quality 15 \
        --min-alternate-fraction 0.1 \
        --report-monomorphic --ploidy 1 \
        --region {wildcards.chr}:{wildcards.start}..{wildcards.stop} \
         {input.bams} > {output.region_vcf}
        '''

rule index_bam:
    params: job_name = 'index_bam{s}.{c}'
    input:  bam = 'bams/{s}/ch{c}.bam'
    output: bai = 'bams/{s}/ch{c}.bam.bai'
    shell:  '''{SAMTOOLS} index {input.bam} {output.bai}'''

rule pileup_subsamples:
    params: job_name = 'pileup_subsample.{s}.{c}'
    input:
        sample_set = 'sample_set.p',
        pileup = 'pileups/{s}/ch{c}.pileup'
    output: pileup = 'pileups_subsample/{s}/ch{c}.pileup'
    run:
        sample_set = pickle.load(open(input.sample_set,"rb"))
        with open(input.pileup,'r') as inf, open(output.pileup,'w') as of:
            for line in inf:
                el = line.strip().split('\t')
                if len(el) < 4:
                    continue
                c = format_chrom(el[0])
                p = int(el[1])-1
                if p in sample_set[c]:
                    print(line,file=of,end='')

sample_rate = 0.00001
rule create_sample_set:
    params: job_name = 'create_sample_set'
    output: pickle   = 'sample_set.p'
    run:
        sample_set = defaultdict(set)
        for chrom,l in hg19_size_list:
            for i in range(l):
                if random.random() < sample_rate:
                    sample_set[chrom].add(i)

        pickle.dump(sample_set,open(output.pickle,"wb"))

rule pileups:
    params: job_name = 'pileup.{s}.{c}'
    input:  bam = 'bams/{s}/ch{c}.bam'
    output: pileup = 'pileups/{s}/ch{c}.pileup'
    shell:
        '''
        {SAMTOOLS} mpileup --adjust-MQ 50 --max-depth 100 --output-MQ --min-MQ 30 --min-BQ 20 --fasta-ref {HG19} --output {output.pileup} {input.bam}
        '''

# simlink data to make path naming scheme consistent between PGP1_21 and PGP1_22
rule simlinks:
    run:
        for ch,chpad in zip(chambers,chambers_pad):
            shell('''
            mkdir -p bams/PGP1_21 bams/PGP1_22 bams/PGP1_A1
            ln -s {PGP1_21_dir}/PGP1_21_ch{chpad}.sorted.chr.bam bams/PGP1_21/ch{ch}.bam
            ln -s {PGP1_22_dir}/PGP1_22_ch{chpad}.sorted.bam bams/PGP1_22/ch{ch}.bam
            ln -s {PGP1_A1_dir}/PGP1_A1_ch{chpad}.sorted.bam bams/PGP1_A1/ch{ch}.bam
            ''')
