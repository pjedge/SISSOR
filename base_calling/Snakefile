from collections import defaultdict
import pickle
import random
import estimate_parameters

localrules: all, simlinks

samples = ['PGP1_21','PGP1_22','PGP1_A1']
chambers = list(range(1,25))
chambers_pad = ['{0:02d}'.format(c) for c in chambers]

chunksize = int(2e6)

SAMTOOLS = '/opt/biotools/samtools/1.3/bin/samtools'
HG19     = '/home/wkchu/zhang_lab_oasis/resources_v2.8_b37/human_g1k_v37_decoy.fasta' #'/oasis/tscc/scratch/pedge/data/genomes/hg19/hg19.fa'
PGP1_21_dir = '/oasis/tscc/scratch/wkchu/SISSOR/PGP1_21_highoutputmem/BAM'
PGP1_22_dir = '/oasis/tscc/scratch/wkchu/SISSOR/PGP1_22/previous/BAM'
PGP1_A1_dir = '/oasis/tscc/scratch/wkchu/SISSOR/PGP1_A1/HiSeqCombinedBAM'

hg19_sizes = '''1	249250621
2	243199373
3	198022430
4	191154276
5	180915260
6	171115067
7	159138663
X	155270560
8	146364022
9	141213431
10	135534747
11	135006516
12	133851895
13	115169878
14	107349540
15	102531392
16	90354753
17	81195210
18	78077248
20	63025520
Y	59373566
19	59128983
22	51304566
21	48129895'''
hg19_size_list = []
for line in hg19_sizes.split('\n'):
    c,l = line.split('\t')
    hg19_size_list.append((c,int(l)))

# create chunks of hg19
# return list of (chrom,start,stop) tuples. stop is inclusive
chunklist = []
for chrom, chrlen in hg19_size_list:
    for start in range(1,chrlen+1,chunksize):
        end = start+chunksize-1 if start+chunksize-1 < chrlen else chrlen
        chunklist.append((chrom,start,end))

#chunklist = [(a,b,c) for a,b,c in chunklist] # if a == '20']
regions = ['{}.{}.{}'.format(chrom,start,stop) for chrom,start,stop in chunklist]

rule all:
    input:
        'output/chamber_allele_calls.txt'

NUM_CHUNKS = 1000
chunknum = ['{0:03d}'.format(i) for i in range(0,NUM_CHUNKS)]
rule combine_base_calls:
    params: job_name = 'combine_base_calls'
    input:  expand('output/split/chunk{C}',chunknum)
    output: 'output/calls'
    shell: 'cat {input} > {output}'

rule call_alleles:
    params: job_name = 'call_alleles'
    input:  'pileups/split/chunk{C}.pileup'
    output: 'output/split/chunk{C}'
    run:
        call_chamber_alleles.call_chamber_alleles(input, output)

rule combine_parameters:
    params: job_name = 'combine_parameters'
    input:  expand('parameters/split/chrX_covs{C}.p',chunknum),
            expand('parameters/split/chamber_position_counts{C}.p',chunknum),
            expand('parameters/split/strand_coverage_counts{C}.p',chunknum),
            expand('parameters/split/total_sampled_cell_positions{C}.p',chunknum),
    output: "parameters/chrX_covs.p",
            "parameters/chamber_position_counts.p",
            "parameters/strand_coverage_counts.p",
            "parameters/total_sampled_cell_positions.p",
            "parameters/cov_frac_dist.p"
    run:
        estimate_parameters.combine_parameters(chunknum)

rule estimate_parameters:
    params: job_name = 'estimate_parameters'
    input:  'pileups/split/chunk{C}.pileup'
    output: 'parameters/split/chrX_covs{C}.p',
            'parameters/split/chamber_position_counts{C}.p',
            'parameters/split/strand_coverage_counts{C}.p',
            'parameters/split/total_sampled_cell_positions{C}.p',
    run:
        estimate_parameters.estimate_parameters(input, wildcards.C)

rule split_pileup:
    params: job_name = 'split_pileup'
    input:  'pileups/combined.pileup'
    output: expand('pileups/split/chunk{C}.pileup',chunknum)
    shell: 'split -n {NUM_CHUNKS} -a 3 -d --additional-suffix .pileup {input} pileups/split/chunk'

rule combined_pileup:
    params: job_name = 'combined_pileup'
    input:  bams = expand('bams/{s}/ch{c}.bam',s=samples,c=chambers)
    output: pileup = 'pileups/combined.pileup'
    shell:  '{SAMTOOLS} mpileup --adjust-MQ 50 --max-depth 100 --output-MQ --min-MQ 30 --min-BQ 20 --fasta-ref {HG19} --output {output.pileup} {input.bams}'

# PGP1_22 and PGP1_A1 don't have chr before chromosome labels. necessary for pileup to include reference
# credit to petervangalen and Pierre Lindenbaum for this rule's code: https://www.biostars.org/p/13462/
rule add_chr_prefix:
    params: job_name = 'add_chr_prefix.{s}.{c}'
    input:  'bams/{s}/ch{c}.no_chr_prefix.bam'
    output: 'bams/{s}/ch{c}.bam'
    shell: '''{SAMTOOLS} view -H {input} | sed -e 's/SN:1/SN:chr1/' | sed -e 's/SN:2/SN:chr2/' | sed -e 's/SN:3/SN:chr3/' | sed -e 's/SN:4/SN:chr4/' | sed -e 's/SN:5/SN:chr5/' | sed -e 's/SN:6/SN:chr6/' | sed -e 's/SN:7/SN:chr7/' | sed -e 's/SN:8/SN:chr8/' | sed -e 's/SN:9/SN:chr9/' | sed -e 's/SN:10/SN:chr10/' | sed -e 's/SN:11/SN:chr11/' | sed -e 's/SN:12/SN:chr12/' | sed -e 's/SN:13/SN:chr13/' | sed -e 's/SN:14/SN:chr14/' | sed -e 's/SN:15/SN:chr15/' | sed -e 's/SN:16/SN:chr16/' | sed -e 's/SN:17/SN:chr17/' | sed -e 's/SN:18/SN:chr18/' | sed -e 's/SN:19/SN:chr19/' | sed -e 's/SN:20/SN:chr20/' | sed -e 's/SN:21/SN:chr21/' | sed -e 's/SN:22/SN:chr22/' | sed -e 's/SN:X/SN:chrX/' | sed -e 's/SN:Y/SN:chrY/' | sed -e 's/SN:MT/SN:chrM/' | {SAMTOOLS} reheader - {input} > {output}'''

# simlink data to make path naming scheme consistent between PGP1_21 and PGP1_22
rule simlinks:
    run:
        for ch,chpad in zip(chambers,chambers_pad):
            shell('''
            mkdir -p bams/PGP1_21 bams/PGP1_22 bams/PGP1_A1
            ln -s {PGP1_21_dir}/PGP1_21_ch{chpad}.sorted.chr.bam bams/PGP1_21/ch{ch}.bam
            ln -s {PGP1_22_dir}/PGP1_22_ch{chpad}.sorted.bam bams/PGP1_22/ch{ch}.no_chr_prefix.bam
            ln -s {PGP1_A1_dir}/PGP1_A1_ch{chpad}.sorted.bam bams/PGP1_A1/ch{ch}.no_chr_prefix.bam
            ''')
